// Wheel rotor
// A component of a disc brake system. It provides a surface for brake pads to press
// against, generating the friction needed to slow or stop the vehicle.

const rotorDiameter = 12 // inches
const rotorInnerDiameter = 6 // inches
const rotorSinglePlateThickness = 6.3 // mm
const rotorInnerDiameterThickness = 12.6 // mm
const lugHolePatternDia = 3 // inches
const lugSpacing = 114.3 // millimeters
const rotorTotalThickness = 25.4 // mm
const spacerPatternDiameter = 11 // inches
const spacerDiameter = 6.3 // mm
const spacerLength = rotorTotalThickness - 2*rotorSinglePlateThickness
const spacerCount = 16
const wheeldiameter = 19 // inches
const lugCount = 5
const yAxisOffset = 10

const rotorPlane = {
  plane: {
    origin: { x: 0, y: yAxisOffset, z: 0 },
    xAxis: { x: -1, y: 0, z: 0 },
    yAxis: { x: 0, y: 0, z: 1 },
    zAxis: { x: 0, y: 1, z: 0 }
  }
}

fn lugPattern = (plane) => {
  const lugHolePattern = circle([-lugSpacing/2, 0], 8, plane) 
  |> patternCircular2d({
    arcDegrees: 360,
    center: [0, 0],
    repetitions: lugCount - 1,
    rotateDuplicates: true,
  }, %)
  return lugHolePattern
}

const rotorSketch = startSketchOn(rotorPlane)
  |> circle([0, 0], rotorDiameter/2 * 25.4, %)
  |> hole(lugPattern(%), %)
  
const rotor = extrude(rotorSinglePlateThickness, rotorSketch)

const rotorBumpSketch = startSketchOn(rotorPlane)
  |> circle([0, 0], rotorInnerDiameter/2 * 25.4, %)
  |> hole(lugPattern(%), %)
  
const rotorBump = extrude(-rotorInnerDiameterThickness, rotorBumpSketch)

const rotorSecondaryPlatePlane = {
  plane: {
    origin: { x: 0, y: yAxisOffset + rotorTotalThickness*0.75, z: 0 },
    xAxis: { x: -1, y: 0, z: 0 },
    yAxis: { x: 0, y: 0, z: 1 },
    zAxis: { x: 0, y: 1, z: 0 }
  }
}

const secondaryRotorSketch = startSketchOn(rotorSecondaryPlatePlane)
  |> circle([0, 0], rotorDiameter/2 * 25.4, %)
  |> hole(lugPattern(%), %)

const secondRotor = extrude(rotorSinglePlateThickness, secondaryRotorSketch)

const spacerSketch = startSketchOn(rotorSecondaryPlatePlane)
  |> circle([spacerPatternDiameter/2 * 25.4, 0], spacerDiameter, %)
  |> patternCircular2d({
    arcDegrees: 360,
    center: [0, 0],
    repetitions: spacerCount,
    rotateDuplicates: true,
  }, %)

const spacers = extrude(-spacerLength, spacerSketch)
